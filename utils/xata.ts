// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "accounting_book",
    columns: [
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "default_name",
      },
      { name: "pin", type: "string" },
    ],
    revLinks: [
      { column: "book_id", table: "member" },
      { column: "book_id", table: "transaction_category" },
      { column: "book_id", table: "transaction_record" },
      { column: "book_id", table: "comments" },
    ],
  },
  {
    name: "member",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "" },
      { name: "book_id", type: "link", link: { table: "accounting_book" } },
      { name: "email", type: "email" },
      { name: "share", type: "int", notNull: true, defaultValue: "1000" },
    ],
    revLinks: [
      { column: "member_id", table: "transaction_record" },
      { column: "member_id", table: "comments" },
    ],
  },
  {
    name: "transaction_category",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: '""' },
      { name: "icon", type: "string", notNull: true, defaultValue: '""' },
      { name: "type", type: "string", notNull: true, defaultValue: "OUT" },
      { name: "book_id", type: "link", link: { table: "accounting_book" } },
    ],
    revLinks: [{ column: "catrgory_id", table: "transaction_record" }],
  },
  {
    name: "transaction_record",
    columns: [
      { name: "amount", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "catrgory_id",
        type: "link",
        link: { table: "transaction_category" },
      },
      {
        name: "transaction_date",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "member_id", type: "link", link: { table: "member" } },
      { name: "book_id", type: "link", link: { table: "accounting_book" } },
      {
        name: "description",
        type: "string",
        notNull: true,
        defaultValue: '""',
      },
      { name: "images", type: "file[]" },
      { name: "type", type: "string", defaultValue: "expense" },
    ],
  },
  {
    name: "comments",
    columns: [
      { name: "content", type: "text" },
      { name: "member_id", type: "link", link: { table: "member" } },
      { name: "book_id", type: "link", link: { table: "accounting_book" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type AccountingBook = InferredTypes["accounting_book"];
export type AccountingBookRecord = AccountingBook & XataRecord;

export type Member = InferredTypes["member"];
export type MemberRecord = Member & XataRecord;

export type TransactionCategory = InferredTypes["transaction_category"];
export type TransactionCategoryRecord = TransactionCategory & XataRecord;

export type TransactionRecord = InferredTypes["transaction_record"];
export type TransactionRecordRecord = TransactionRecord & XataRecord;

export type Comments = InferredTypes["comments"];
export type CommentsRecord = Comments & XataRecord;

export type DatabaseSchema = {
  accounting_book: AccountingBookRecord;
  member: MemberRecord;
  transaction_category: TransactionCategoryRecord;
  transaction_record: TransactionRecordRecord;
  comments: CommentsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://bblack1225-s-workspace-aq67no.ap-southeast-2.xata.sh/db/ffh",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
